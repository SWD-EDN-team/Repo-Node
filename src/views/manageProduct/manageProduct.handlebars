<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quản lý sản phẩm</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body class="container mt-4">
  <h2 class="text-center mb-4 mt-4">Quản lý sản phẩm</h2>
  
  <div class="mb-3">
    <input type="text" id="search" class="form-control" placeholder="Tìm kiếm sản phẩm..." oninput="searchProducts()">
  </div>
  
  <table class="table table-striped table-bordered">
    <thead class="table-dark">
      <tr>
        <th>Product name</th>
        <th>Price</th>
        <th>Color</th>
        <th>Size</th>
        <th>Feature</th>
      </tr>
    </thead>
    <tbody id="product-list"></tbody>
  </table>
  
  <div class="d-flex justify-content-between">
    <button id="prevPage" class="btn btn-secondary" disabled>Trước</button>
    <span id="pageInfo" class="align-self-center">Trang 1</span>
    <button id="nextPage" class="btn btn-secondary">Tiếp theo</button>
  </div>
{{!-- Edit Product --}}
  <div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Chỉnh sửa sản phẩm</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editId">
          <div class="mb-3">
            <input type="text" id="editName" class="form-control" placeholder="Tên sản phẩm">
          </div>
          <div class="mb-3">
              <select class="form-select" id="category" name="category" required>
                <option value="" disabled selected>Select a category</option>
              </select>
          </div>

          <div class="mb-3">
            <input type="number" id="editPrice" class="form-control" placeholder="Giá">
          </div>
          <div class="mb-3">
            <input type="text" id="editColor" class="form-control" placeholder="Màu">
          </div>
          <div class="mb-3">
            <input type="text" id="editSize" class="form-control" placeholder="Kích thước">
          </div>
          <div class="mb-3">
            <input type="number" id="editQuantity" class="form-control" placeholder="editQuantity">
          </div>
          <div class="mb-3">
            <input type="text" id="editDesciption" class="form-control" placeholder="editDesciption">
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-primary" onclick="updateProduct()">Lưu</button>
          <button class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", async function () {
    try {
        const response = await axios.get("http://localhost:8081/api/v1/category");
        const categories = response.data;
        const categorySelect = document.getElementById("category");
        
        categories.forEach(category => {
            const option = document.createElement("option");
            option.value = category._id;
            option.textContent = category.category_name;
            categorySelect.appendChild(option);
        });

        console.log("Danh sách categories:", categories); 
    } catch (error) {
        console.error("Lỗi khi lấy danh mục:", error);
    }
});


    let currentPage = 1;
    const itemsPerPage = 5;
    let products = [];
    let filteredProducts = [];

    async function fetchProducts() {
      try {
        const response = await axios.get("http://localhost:8081/api/v1/product", {
          headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
        });
        products = response.data;
        filteredProducts = products;
        renderTable();
      } catch (e) {
        console.error("Lỗi khi lấy dữ liệu:", e);
      }
    }

    function renderTable() {
      const tableBody = document.getElementById("product-list");
      tableBody.innerHTML = "";
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      filteredProducts.slice(start, end).forEach(product => {
        tableBody.innerHTML += `
          <tr>
            <td>${product.product_name}</td>
            <td>${product.price}</td>
            <td>${product.color}</td>
            <td>${product.size}</td>
            <td>
              <button class="btn btn-warning btn-sm" onclick="editProduct('${product._id}')">Edit</button>
              <button class="btn btn-danger btn-sm" onclick="deleteProduct('${product._id}')">Delete</button>
            </td>
          </tr>`;
      });
      updatePagination();
    }

    function updatePagination() {
      document.getElementById("pageInfo").innerText = `Trang ${currentPage}`;
      document.getElementById("prevPage").disabled = currentPage === 1;
      document.getElementById("nextPage").disabled = currentPage * itemsPerPage >= filteredProducts.length;
    }

    function searchProducts() {
      const query = document.getElementById("search").value.toLowerCase();
      filteredProducts = products.filter(p => p.product_name.toLowerCase().includes(query));
      currentPage = 1;
      renderTable();
    }

    function editProduct(id) {
      const product = products.find(p => p._id === id);
      if (!product) return;
      document.getElementById("editId").value = product._id;
      document.getElementById("editName").value = product.product_name;
      document.getElementById("editPrice").value = product.price;
      document.getElementById("editColor").value = product.color;
      document.getElementById("editSize").value = product.size;
      document.getElementById("category").value = product.category || ""
      document.getElementById("editDesciption").value = product.description;
      document.getElementById("editQuantity").value = +product.stoke_quantity;

      new bootstrap.Modal(document.getElementById("editModal")).show();
    }

    function updateProduct() {
    const id = document.getElementById("editId").value;
    const category_id = document.getElementById("category").value;
    console.log("Category ID:", category_id);
    axios.put(`http://localhost:8081/api/v1/product/${id}`, {
      product_name: document.getElementById("editName").value,
      price: document.getElementById("editPrice").value,
      color: document.getElementById("editColor").value,
      size: document.getElementById("editSize").value,
      description: document.getElementById("editDesciption").value,
      stoke_quantity: document.getElementById("editQuantity").value,
      category_id:category_id
    }, {
      headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
    })
      .then(() => {
        fetchProducts();
        bootstrap.Modal.getInstance(document.getElementById("editModal")).hide(); 
    })
      .catch(err => console.error("Lỗi cập nhật sản phẩm:", err));
    }


    function deleteProduct(id) {
      axios.delete(`http://localhost:8081/api/v1/product/${id}`, {
        headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
      }).then(() => fetchProducts());
    }

    document.getElementById("prevPage").addEventListener("click", () => { if (currentPage > 1) { currentPage--; renderTable(); } });
    document.getElementById("nextPage").addEventListener("click", () => { if (currentPage * itemsPerPage < filteredProducts.length) { currentPage++; renderTable(); } });
    fetchProducts();
  </script>
</body>
</html>
